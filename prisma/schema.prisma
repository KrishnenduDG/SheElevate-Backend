generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  cid                      String                     @unique @default(uuid())
  name                     String                     @unique
  description              String
  BusinessCategoryMapping  BusinessCategoryMapping[]
  WorkspaceCategoryMapping WorkspaceCategoryMapping[]
}

model ProductImage {
  iid String @id @unique @default(uuid())

  imgUrl     String
  caption    String
  uploadedAt DateTime @default(now())

  workspace Workspace @relation(fields: [wid], references: [wid])
  wid       String
}

model Business {
  bid String @unique @default(uuid())

  firebase_uid String @unique
  name         String @unique
  username     String @unique
  email        String @unique
  phoneNumber  String @unique

  address                 String[]
  profilePic              String
  coverPic                String
  bio                     String
  productPics             String[]
  establishedAt           Int
  joinedAt                DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  BusinessCategoryMapping BusinessCategoryMapping[]
}

model BusinessCategoryMapping {
  id String @unique @default(uuid())

  category Category @relation(fields: [cid], references: [cid], onDelete: Cascade)
  cid      String

  business Business @relation(fields: [bid], references: [bid], onDelete: Cascade)
  bid      String
}

model User {
  uid String @unique @default(uuid())

  firebase_uid String @unique
  name         String @unique
  username     String @unique
  email        String @unique
  phoneNumber  String @unique

  address              String
  profilePic           String?
  showcasePics         String[]
  bio                  String
  joinedAt             DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  WorkspaceUserMapping WorkspaceUserMapping[]
}

model Workspace {
  wid String @id @unique @default(uuid())

  name                     String                     @unique
  description              String
  coverPic                 String
  createdAt                DateTime                   @default(now())
  ProductImage             ProductImage[]
  WorkspaceCategoryMapping WorkspaceCategoryMapping[]
  WorkspaceUserMapping     WorkspaceUserMapping[]
}

model WorkspaceCategoryMapping {
  id String @unique @default(uuid())

  workspace Workspace @relation(fields: [wid], references: [wid])
  wid       String

  category Category @relation(fields: [cid], references: [cid])
  cid      String
}

model WorkspaceUserMapping {
  id String @unique @default(uuid())

  workspace Workspace @relation(fields: [wid], references: [wid])
  wid       String

  user User   @relation(fields: [uid], references: [uid])
  uid  String
}
